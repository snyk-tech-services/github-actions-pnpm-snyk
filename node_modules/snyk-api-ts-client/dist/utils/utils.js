"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsUnionOf = exports.tsPartial = exports.tsIntersectionOf = exports.tsArrayOf = exports.transformRef = exports.nodeType = exports.fromEntries = exports.comment = void 0;
function comment(text) {
    return `/**
  * ${text.trim().replace('\n+$', '').replace(/\n/g, '\n  * ')}
  */
`;
}
exports.comment = comment;
/** shim for Object.fromEntries() for Node < 13 */
function fromEntries(entries) {
    return entries.reduce((obj, [key, val]) => ({ ...obj, [key]: val }), {});
}
exports.fromEntries = fromEntries;
function nodeType(obj) {
    if (!obj || typeof obj !== 'object') {
        return undefined;
    }
    if (obj['$ref']) {
        return 'ref';
    }
    // enum
    if (Array.isArray(obj.enum)) {
        return 'enum';
    }
    // boolean
    if (obj.type === 'boolean') {
        return 'boolean';
    }
    // string
    if (['binary', 'byte', 'date', 'dateTime', 'password', 'string'].includes(obj.type)) {
        return 'string';
    }
    // number
    if (['double', 'float', 'integer', 'number'].includes(obj.type)) {
        return 'number';
    }
    // anyOf
    if (Array.isArray(obj.anyOf)) {
        return 'anyOf';
    }
    // oneOf
    if (Array.isArray(obj.oneOf)) {
        return 'oneOf';
    }
    // array
    if (obj.type === 'array' || obj.items) {
        return 'array';
    }
    // return object by default
    return 'object';
}
exports.nodeType = nodeType;
/** Convert $ref to TS ref */
function transformRef(ref) {
    const parts = ref.replace(/^#\//, '').split('/');
    return `${parts[0]}["${parts.slice(1).join('"]["')}"]`;
}
exports.transformRef = transformRef;
/** Convert T into T[]; */
function tsArrayOf(type) {
    return `${type}[]`;
}
exports.tsArrayOf = tsArrayOf;
/** Convert T, U into T & U; */
function tsIntersectionOf(types) {
    return `${types.join(' & ')}`;
}
exports.tsIntersectionOf = tsIntersectionOf;
/** Convert T into Partial<T> */
function tsPartial(type) {
    return `Partial<${type}>`;
}
exports.tsPartial = tsPartial;
/** Convert [X, Y, Z] into X | Y | Z */
function tsUnionOf(types) {
    return `${types.join(' | ')}`;
}
exports.tsUnionOf = tsUnionOf;
//# sourceMappingURL=utils.js.map