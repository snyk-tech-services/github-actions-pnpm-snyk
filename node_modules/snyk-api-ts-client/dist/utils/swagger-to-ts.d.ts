export declare type OpenAPI3Type = 'array' | 'boolean' | 'integer' | 'number' | 'object' | 'string';
interface OpenAPI3SchemaObject {
    additionalProperties?: OpenAPI3SchemaObject | OpenAPI3Reference | boolean;
    allOf?: (OpenAPI3SchemaObject | OpenAPI3Reference)[];
    description?: string;
    enum?: string[];
    items?: OpenAPI3SchemaObject | OpenAPI3Reference;
    nullable?: boolean;
    oneOf?: (OpenAPI3SchemaObject | OpenAPI3Reference)[];
    properties?: {
        [key: string]: OpenAPI3SchemaObject | OpenAPI3Reference;
    };
    required?: string[];
    title?: string;
    type?: OpenAPI3Type;
    [key: string]: any;
}
export declare type OpenAPI3Reference = {
    $ref: string;
} | {
    anyOf: (OpenAPI3SchemaObject | OpenAPI3Reference)[];
} | {
    oneOf: (OpenAPI3SchemaObject | OpenAPI3Reference)[];
};
declare const convert: (node: OpenAPI3SchemaObject, interfaceName: string) => string;
declare const getTsInterfaceFromSwaggerSchema: (interfaceName: string, schema: any) => string[];
export { convert, getTsInterfaceFromSwaggerSchema };
