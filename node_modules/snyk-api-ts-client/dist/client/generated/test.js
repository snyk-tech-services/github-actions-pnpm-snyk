"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Depgraph = exports.Composer = exports.Pip = exports.Sbt = exports.Gradle = exports.Rubygems = exports.Yarn = exports.Govendor = exports.Golangdep = exports.Npm = exports.Maven = exports.Test = void 0;
const clientError_1 = require("../errors/clientError");
const snyk_request_manager_1 = require("snyk-request-manager");
const requestManager = new snyk_request_manager_1.requestsManager({
    burstSize: 100,
    period: 100,
    maxRetryCount: 10,
    userAgentPrefix: 'snyk-api-ts-client',
});
class Test {
    constructor(fullResponse = false) {
        this.fullResponse = false;
        this.currentContext = {};
        this.fullResponse = fullResponse || false;
        const thisProperties = Object.getOwnPropertyNames(this);
        thisProperties.forEach((thisProperty) => {
            Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
        });
        this.golangdep = new Golangdep.Golangdep(this.currentContext);
        this.govendor = new Govendor.Govendor(this.currentContext);
        this.yarn = new Yarn.Yarn(this.currentContext);
        this.composer = new Composer.Composer(this.currentContext);
        this.depgraph = new Depgraph.Depgraph(this.currentContext);
    }
    maven(Mavenparam) {
        return new Maven.Maven(this.currentContext, {
            groupId: (Mavenparam === null || Mavenparam === void 0 ? void 0 : Mavenparam.groupId) || '',
            artifactId: (Mavenparam === null || Mavenparam === void 0 ? void 0 : Mavenparam.artifactId) || '',
            version: (Mavenparam === null || Mavenparam === void 0 ? void 0 : Mavenparam.version) || '',
        });
    }
    npm(Npmparam) {
        return new Npm.Npm(this.currentContext, {
            packageName: (Npmparam === null || Npmparam === void 0 ? void 0 : Npmparam.packageName) || '',
            version: (Npmparam === null || Npmparam === void 0 ? void 0 : Npmparam.version) || '',
        });
    }
    rubygems(Rubygemsparam) {
        return new Rubygems.Rubygems(this.currentContext, {
            gemName: (Rubygemsparam === null || Rubygemsparam === void 0 ? void 0 : Rubygemsparam.gemName) || '',
            version: (Rubygemsparam === null || Rubygemsparam === void 0 ? void 0 : Rubygemsparam.version) || '',
        });
    }
    gradle(Gradleparam) {
        return new Gradle.Gradle(this.currentContext, {
            group: (Gradleparam === null || Gradleparam === void 0 ? void 0 : Gradleparam.group) || '',
            name: (Gradleparam === null || Gradleparam === void 0 ? void 0 : Gradleparam.name) || '',
            version: (Gradleparam === null || Gradleparam === void 0 ? void 0 : Gradleparam.version) || '',
        });
    }
    sbt(Sbtparam) {
        return new Sbt.Sbt(this.currentContext, {
            groupId: (Sbtparam === null || Sbtparam === void 0 ? void 0 : Sbtparam.groupId) || '',
            artifactId: (Sbtparam === null || Sbtparam === void 0 ? void 0 : Sbtparam.artifactId) || '',
            version: (Sbtparam === null || Sbtparam === void 0 ? void 0 : Sbtparam.version) || '',
        });
    }
    pip(Pipparam) {
        return new Pip.Pip(this.currentContext, {
            packageName: (Pipparam === null || Pipparam === void 0 ? void 0 : Pipparam.packageName) || '',
            version: (Pipparam === null || Pipparam === void 0 ? void 0 : Pipparam.version) || '',
        });
    }
}
exports.Test = Test;
var Maven;
(function (Maven_1) {
    class Maven {
        constructor(parentContext, Mavenparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.groupId = (Mavenparam === null || Mavenparam === void 0 ? void 0 : Mavenparam.groupId) || '';
            this.artifactId = (Mavenparam === null || Mavenparam === void 0 ? void 0 : Mavenparam.artifactId) || '';
            this.version = (Mavenparam === null || Mavenparam === void 0 ? void 0 : Mavenparam.version) || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get(org, repository) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/maven/${Object(this.currentContext)['groupId']}/${Object(this.currentContext)['artifactId']}/${Object(this.currentContext)['version']}`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (repository) {
                urlQueryParams.push('repository=' + repository);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async post(body, org, repository) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/maven`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (repository) {
                urlQueryParams.push('repository=' + repository);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Maven_1.Maven = Maven;
})(Maven = exports.Maven || (exports.Maven = {}));
var Npm;
(function (Npm_1) {
    class Npm {
        constructor(parentContext, Npmparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.packageName = (Npmparam === null || Npmparam === void 0 ? void 0 : Npmparam.packageName) || '';
            this.version = (Npmparam === null || Npmparam === void 0 ? void 0 : Npmparam.version) || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get(org) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/npm/${Object(this.currentContext)['packageName']}/${Object(this.currentContext)['version']}`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/npm`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Npm_1.Npm = Npm;
})(Npm = exports.Npm || (exports.Npm = {}));
var Golangdep;
(function (Golangdep_1) {
    class Golangdep {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body, org) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/golangdep`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Golangdep_1.Golangdep = Golangdep;
})(Golangdep = exports.Golangdep || (exports.Golangdep = {}));
var Govendor;
(function (Govendor_1) {
    class Govendor {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/govendor`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Govendor_1.Govendor = Govendor;
})(Govendor = exports.Govendor || (exports.Govendor = {}));
var Yarn;
(function (Yarn_1) {
    class Yarn {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/yarn`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Yarn_1.Yarn = Yarn;
})(Yarn = exports.Yarn || (exports.Yarn = {}));
var Rubygems;
(function (Rubygems_1) {
    class Rubygems {
        constructor(parentContext, Rubygemsparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.gemName = (Rubygemsparam === null || Rubygemsparam === void 0 ? void 0 : Rubygemsparam.gemName) || '';
            this.version = (Rubygemsparam === null || Rubygemsparam === void 0 ? void 0 : Rubygemsparam.version) || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get(org) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/rubygems/${Object(this.currentContext)['gemName']}/${Object(this.currentContext)['version']}`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/rubygems`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Rubygems_1.Rubygems = Rubygems;
})(Rubygems = exports.Rubygems || (exports.Rubygems = {}));
var Gradle;
(function (Gradle_1) {
    class Gradle {
        constructor(parentContext, Gradleparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.group = (Gradleparam === null || Gradleparam === void 0 ? void 0 : Gradleparam.group) || '';
            this.name = (Gradleparam === null || Gradleparam === void 0 ? void 0 : Gradleparam.name) || '';
            this.version = (Gradleparam === null || Gradleparam === void 0 ? void 0 : Gradleparam.version) || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get(org, repository) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/gradle/${Object(this.currentContext)['group']}/${Object(this.currentContext)['name']}/${Object(this.currentContext)['version']}`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (repository) {
                urlQueryParams.push('repository=' + repository);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/gradle`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Gradle_1.Gradle = Gradle;
})(Gradle = exports.Gradle || (exports.Gradle = {}));
var Sbt;
(function (Sbt_1) {
    class Sbt {
        constructor(parentContext, Sbtparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.groupId = (Sbtparam === null || Sbtparam === void 0 ? void 0 : Sbtparam.groupId) || '';
            this.artifactId = (Sbtparam === null || Sbtparam === void 0 ? void 0 : Sbtparam.artifactId) || '';
            this.version = (Sbtparam === null || Sbtparam === void 0 ? void 0 : Sbtparam.version) || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get(org, repository) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/sbt/${Object(this.currentContext)['groupId']}/${Object(this.currentContext)['artifactId']}/${Object(this.currentContext)['version']}`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (repository) {
                urlQueryParams.push('repository=' + repository);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/sbt`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Sbt_1.Sbt = Sbt;
})(Sbt = exports.Sbt || (exports.Sbt = {}));
var Pip;
(function (Pip_1) {
    class Pip {
        constructor(parentContext, Pipparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.packageName = (Pipparam === null || Pipparam === void 0 ? void 0 : Pipparam.packageName) || '';
            this.version = (Pipparam === null || Pipparam === void 0 ? void 0 : Pipparam.version) || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get(org) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/pip/${Object(this.currentContext)['packageName']}/${Object(this.currentContext)['version']}`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/pip`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Pip_1.Pip = Pip;
})(Pip = exports.Pip || (exports.Pip = {}));
var Composer;
(function (Composer_1) {
    class Composer {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/composer`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Composer_1.Composer = Composer;
})(Composer = exports.Composer || (exports.Composer = {}));
var Depgraph;
(function (Depgraph_1) {
    class Depgraph {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body, org) {
            let url = '';
            let urlQueryParams = [];
            url = `/test/dep-graph`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Depgraph_1.Depgraph = Depgraph;
})(Depgraph = exports.Depgraph || (exports.Depgraph = {}));
//# sourceMappingURL=test.js.map