"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhooks = exports.Audit = exports.Entitlement = exports.Entitlements = exports.Licenses = exports.Dependencies = exports.Project = exports.Projects = exports.Integrations = exports.Settings = exports.Members = exports.Invite = exports.Notificationsettings = exports.Org = void 0;
const tslib_1 = require("tslib");
const clientError_1 = require("../errors/clientError");
const snyk_request_manager_1 = require("snyk-request-manager");
const utils = tslib_1.__importStar(require("../utils/utils"));
const requestManager = new snyk_request_manager_1.requestsManager({
    burstSize: 100,
    period: 100,
    maxRetryCount: 10,
    userAgentPrefix: 'snyk-api-ts-client',
});
const aggregatedissues_1 = require("../abstraction/org/aggregatedissues");
class Org {
    constructor(Orgparam, fullResponse = false) {
        this.fullResponse = false;
        this.currentContext = {};
        this.fullResponse = fullResponse || false;
        this.orgId = (Orgparam === null || Orgparam === void 0 ? void 0 : Orgparam.orgId) || '';
        const thisProperties = Object.getOwnPropertyNames(this);
        thisProperties.forEach((thisProperty) => {
            Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
        });
        this.notificationsettings = new Notificationsettings.Notificationsettings(this.currentContext);
        this.invite = new Invite.Invite(this.currentContext);
        this.settings = new Settings.Settings(this.currentContext);
        this.projects = new Projects.Projects(this.currentContext);
        this.dependencies = new Dependencies.Dependencies(this.currentContext);
        this.licenses = new Licenses.Licenses(this.currentContext);
        this.entitlements = new Entitlements.Entitlements(this.currentContext);
        this.audit = new Audit.Audit(this.currentContext);
    }
    members(Membersparam) {
        return new Members.Members(this.currentContext, {
            userId: (Membersparam === null || Membersparam === void 0 ? void 0 : Membersparam.userId) || '',
        });
    }
    integrations(Integrationsparam) {
        return new Integrations.Integrations(this.currentContext, {
            integrationId: (Integrationsparam === null || Integrationsparam === void 0 ? void 0 : Integrationsparam.integrationId) || '',
            type: (Integrationsparam === null || Integrationsparam === void 0 ? void 0 : Integrationsparam.type) || '',
        });
    }
    project(Projectparam) {
        return new Project.Project(this.currentContext, {
            projectId: (Projectparam === null || Projectparam === void 0 ? void 0 : Projectparam.projectId) || '',
        });
    }
    entitlement(Entitlementparam) {
        return new Entitlement.Entitlement(this.currentContext, {
            entitlementKey: (Entitlementparam === null || Entitlementparam === void 0 ? void 0 : Entitlementparam.entitlementKey) || '',
        });
    }
    webhooks(Webhooksparam) {
        return new Webhooks.Webhooks(this.currentContext, {
            webhookId: (Webhooksparam === null || Webhooksparam === void 0 ? void 0 : Webhooksparam.webhookId) || '',
        });
    }
    async post(body) {
        let url = '';
        let urlQueryParams = [];
        url = `/org`;
        if (urlQueryParams.length > 0) {
            url += `?${urlQueryParams.join('&')}`;
        }
        try {
            const result = await requestManager.request({
                verb: 'post',
                url: url,
                body: JSON.stringify(body),
            });
            if (!Object(this.currentContext)['fullResponse'] && result.data) {
                return result.data;
            }
            else {
                return result;
            }
        }
        catch (err) {
            throw new clientError_1.ClientError(err);
        }
    }
    async delete() {
        let url = '';
        let urlQueryParams = [];
        url = `/org/${Object(this.currentContext)['orgId']}`;
        if (urlQueryParams.length > 0) {
            url += `?${urlQueryParams.join('&')}`;
        }
        try {
            const result = await requestManager.request({ verb: 'delete', url: url });
            if (!Object(this.currentContext)['fullResponse'] && result.data) {
                return result.data;
            }
            else {
                return result;
            }
        }
        catch (err) {
            throw new clientError_1.ClientError(err);
        }
    }
}
exports.Org = Org;
var Notificationsettings;
(function (Notificationsettings_1) {
    class Notificationsettings {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/notification-settings`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async put(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/notification-settings`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'put',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Notificationsettings_1.Notificationsettings = Notificationsettings;
})(Notificationsettings = exports.Notificationsettings || (exports.Notificationsettings = {}));
var Invite;
(function (Invite_1) {
    class Invite {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/invite`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Invite_1.Invite = Invite;
})(Invite = exports.Invite || (exports.Invite = {}));
[];
var Members;
(function (Members_1) {
    class Members {
        constructor(parentContext, Membersparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.userId = Membersparam.userId || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        update(Updateparam) {
            return new Update.Update(this.currentContext, {
                userId: (Updateparam === null || Updateparam === void 0 ? void 0 : Updateparam.userId) || '',
            });
        }
        async get(includeGroupAdmins) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/members`;
            if (includeGroupAdmins) {
                urlQueryParams.push('includeGroupAdmins=' + includeGroupAdmins);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async put(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/members/${Object(this.currentContext)['userId']}`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'put',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async delete() {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/members/${Object(this.currentContext)['userId']}`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'delete',
                    url: url,
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Members_1.Members = Members;
    let Update;
    (function (Update_1) {
        class Update {
            constructor(parentContext, Updateparam, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                this.userId = Updateparam.userId || '';
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async put(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/members/update/${Object(this.currentContext)['userId']}`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'put',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Update_1.Update = Update;
    })(Update = Members_1.Update || (Members_1.Update = {}));
})(Members = exports.Members || (exports.Members = {}));
var Settings;
(function (Settings_1) {
    class Settings {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/settings`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async put(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/settings`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'put',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Settings_1.Settings = Settings;
})(Settings = exports.Settings || (exports.Settings = {}));
var Integrations;
(function (Integrations_1) {
    class Integrations {
        constructor(parentContext, Integrationsparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.integrationId = Integrationsparam.integrationId || '';
            this.type = Integrationsparam.type || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
            this.authentication = new Authentication.Authentication(this.currentContext);
            this.clone = new Clone.Clone(this.currentContext);
            this.settings = new Settings.Settings(this.currentContext);
        }
        import(Importparam) {
            return new Import.Import(this.currentContext, {
                jobId: (Importparam === null || Importparam === void 0 ? void 0 : Importparam.jobId) || '',
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            if (`${Object(this.currentContext)['orgId']}` != '' &&
                `${Object(this.currentContext)['type']}` != '') {
                url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['type']}`;
            }
            else {
                url = `/org/${Object(this.currentContext)['orgId']}/integrations`;
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/integrations`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async put(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'put',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Integrations_1.Integrations = Integrations;
    let Authentication;
    (function (Authentication_1) {
        class Authentication {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
                this.provisiontoken = new Provisiontoken.Provisiontoken(this.currentContext);
                this.switchtoken = new Switchtoken.Switchtoken(this.currentContext);
            }
            async delete() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}/authentication`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'delete',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Authentication_1.Authentication = Authentication;
        let Provisiontoken;
        (function (Provisiontoken_1) {
            class Provisiontoken {
                constructor(parentContext, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async post() {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}/authentication/provision-token`;
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'post',
                            url: url,
                            body: JSON.stringify({}),
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
            }
            Provisiontoken_1.Provisiontoken = Provisiontoken;
        })(Provisiontoken = Authentication_1.Provisiontoken || (Authentication_1.Provisiontoken = {}));
        let Switchtoken;
        (function (Switchtoken_1) {
            class Switchtoken {
                constructor(parentContext, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async post() {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}/authentication/switch-token`;
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'post',
                            url: url,
                            body: JSON.stringify({}),
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
            }
            Switchtoken_1.Switchtoken = Switchtoken;
        })(Switchtoken = Authentication_1.Switchtoken || (Authentication_1.Switchtoken = {}));
    })(Authentication = Integrations_1.Authentication || (Integrations_1.Authentication = {}));
    let Clone;
    (function (Clone_1) {
        class Clone {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}/clone`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify({}),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Clone_1.Clone = Clone;
    })(Clone = Integrations_1.Clone || (Integrations_1.Clone = {}));
    let Import;
    (function (Import_1) {
        class Import {
            constructor(parentContext, Importparam, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                this.jobId = Importparam.jobId || '';
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}/import`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async get() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}/import/${Object(this.currentContext)['jobId']}`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'get',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Import_1.Import = Import;
    })(Import = Integrations_1.Import || (Integrations_1.Import = {}));
    let Settings;
    (function (Settings_2) {
        class Settings {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async get() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}/settings`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'get',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async put(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/integrations/${Object(this.currentContext)['integrationId']}/settings`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'put',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Settings_2.Settings = Settings;
    })(Settings = Integrations_1.Settings || (Integrations_1.Settings = {}));
})(Integrations = exports.Integrations || (exports.Integrations = {}));
var Projects;
(function (Projects_1) {
    class Projects {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/projects`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Projects_1.Projects = Projects;
})(Projects = exports.Projects || (exports.Projects = {}));
var Project;
(function (Project_1) {
    class Project {
        constructor(parentContext, Projectparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.projectId = Projectparam.projectId || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
            this.deactivate = new Deactivate.Deactivate(this.currentContext);
            this.activate = new Activate.Activate(this.currentContext);
            this.aggregatedissues = new Aggregatedissues.Aggregatedissues(this.currentContext);
            this.depgraph = new Depgraph.Depgraph(this.currentContext);
            this.ignores = new Ignores.Ignores(this.currentContext);
            this.jiraissues = new Jiraissues.Jiraissues(this.currentContext);
            this.settings = new Settings.Settings(this.currentContext);
            this.move = new Move.Move(this.currentContext);
            this.tags = new Tags.Tags(this.currentContext);
            this.attributes = new Attributes.Attributes(this.currentContext);
        }
        issue(Issueparam) {
            return new Issue.Issue(this.currentContext, {
                issueId: (Issueparam === null || Issueparam === void 0 ? void 0 : Issueparam.issueId) || '',
            });
        }
        history(Historyparam) {
            return new History.History(this.currentContext, {
                snapshotId: (Historyparam === null || Historyparam === void 0 ? void 0 : Historyparam.snapshotId) || '',
            });
        }
        ignore(Ignoreparam) {
            return new Ignore.Ignore(this.currentContext, {
                issueId: (Ignoreparam === null || Ignoreparam === void 0 ? void 0 : Ignoreparam.issueId) || '',
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async put(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'put',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async delete() {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'delete',
                    url: url,
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Project_1.Project = Project;
    let Deactivate;
    (function (Deactivate_1) {
        class Deactivate {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/deactivate`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify({}),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Deactivate_1.Deactivate = Deactivate;
    })(Deactivate = Project_1.Deactivate || (Project_1.Deactivate = {}));
    let Activate;
    (function (Activate_1) {
        class Activate {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/activate`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify({}),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Activate_1.Activate = Activate;
    })(Activate = Project_1.Activate || (Project_1.Activate = {}));
    let Aggregatedissues;
    (function (Aggregatedissues_1) {
        class Aggregatedissues {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/aggregated-issues`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async getAggregatedIssuesWithVulnPaths(body) {
                return await aggregatedissues_1.getAggregatedIssuesWithVulnPaths(Object(this.currentContext), body);
            }
        }
        Aggregatedissues_1.Aggregatedissues = Aggregatedissues;
    })(Aggregatedissues = Project_1.Aggregatedissues || (Project_1.Aggregatedissues = {}));
    let Issue;
    (function (Issue_1) {
        class Issue {
            constructor(parentContext, Issueparam, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                this.issueId = Issueparam.issueId || '';
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
                this.paths = new Paths.Paths(this.currentContext);
                this.jiraissue = new Jiraissue.Jiraissue(this.currentContext);
            }
        }
        Issue_1.Issue = Issue;
        let Paths;
        (function (Paths_1) {
            class Paths {
                constructor(parentContext, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async get(snapshotId, perPage, page) {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/issue/${Object(this.currentContext)['issueId']}/paths`;
                    if (snapshotId) {
                        urlQueryParams.push('snapshotId=' + snapshotId);
                    }
                    if (perPage) {
                        urlQueryParams.push('perPage=' + perPage);
                    }
                    if (page) {
                        urlQueryParams.push('page=' + page);
                    }
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'get',
                            url: url,
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
                async getAll(snapshotId, noLimitMode = false) {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/issue/${Object(this.currentContext)['issueId']}/paths`;
                    if (snapshotId) {
                        urlQueryParams.push('snapshotId=' + snapshotId);
                    }
                    let currentPage = 1;
                    const PAGELIMIT = 100;
                    urlQueryParams.push('perPage=' + PAGELIMIT);
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
                    Object(this.currentContext)['fullResponse'] = true;
                    try {
                        const firstPageResult = await requestManager.request({
                            verb: 'get',
                            url: url,
                        });
                        Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                        let totalPages = 1;
                        if (firstPageResult.headers.link) {
                            totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                        }
                        const bulkRequestArray = [];
                        for (let i = 1; i < totalPages; i++) {
                            currentPage++;
                            bulkRequestArray.push({
                                verb: 'get',
                                url: url + `&page=${currentPage}`,
                            });
                            if (!noLimitMode && currentPage > PAGELIMIT) {
                                break;
                            }
                        }
                        let bulkResultsSet = [];
                        if (bulkRequestArray.length > 0) {
                            bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                        }
                        const resultsSet = [
                            firstPageResult.data,
                            ...bulkResultsSet.map((x) => Object(x)['data']),
                        ];
                        return resultsSet;
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
            }
            Paths_1.Paths = Paths;
        })(Paths = Issue_1.Paths || (Issue_1.Paths = {}));
        let Jiraissue;
        (function (Jiraissue_1) {
            class Jiraissue {
                constructor(parentContext, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async post(body) {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/issue/${Object(this.currentContext)['issueId']}/jira-issue`;
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'post',
                            url: url,
                            body: JSON.stringify(body),
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
            }
            Jiraissue_1.Jiraissue = Jiraissue;
        })(Jiraissue = Issue_1.Jiraissue || (Issue_1.Jiraissue = {}));
    })(Issue = Project_1.Issue || (Project_1.Issue = {}));
    let History;
    (function (History_1) {
        class History {
            constructor(parentContext, Historyparam, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                this.snapshotId = Historyparam.snapshotId || '';
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
                this.aggregatedissues = new Aggregatedissues.Aggregatedissues(this.currentContext);
            }
            issue(Issueparam) {
                return new Issue.Issue(this.currentContext, {
                    issueId: (Issueparam === null || Issueparam === void 0 ? void 0 : Issueparam.issueId) || '',
                });
            }
            async post(body, perPage, page) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/history`;
                if (perPage) {
                    urlQueryParams.push('perPage=' + perPage);
                }
                if (page) {
                    urlQueryParams.push('page=' + page);
                }
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async postAll(body, noLimitMode = false) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/history`;
                let currentPage = 1;
                const PAGELIMIT = 100;
                urlQueryParams.push('perPage=' + PAGELIMIT);
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
                Object(this.currentContext)['fullResponse'] = true;
                try {
                    const firstPageResult = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                    let totalPages = 1;
                    if (firstPageResult.headers.link) {
                        totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                    }
                    const bulkRequestArray = [];
                    for (let i = 1; i < totalPages; i++) {
                        currentPage++;
                        bulkRequestArray.push({
                            verb: 'post',
                            url: url + `&page=${currentPage}`,
                            body: JSON.stringify(body),
                        });
                        if (!noLimitMode && currentPage > PAGELIMIT) {
                            break;
                        }
                    }
                    let bulkResultsSet = [];
                    if (bulkRequestArray.length > 0) {
                        bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                    }
                    const resultsSet = [
                        firstPageResult.data,
                        ...bulkResultsSet.map((x) => Object(x)['data']),
                    ];
                    return resultsSet;
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        History_1.History = History;
        let Aggregatedissues;
        (function (Aggregatedissues_2) {
            class Aggregatedissues {
                constructor(parentContext, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async post(body) {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/history/${Object(this.currentContext)['snapshotId']}/aggregated-issues`;
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'post',
                            url: url,
                            body: JSON.stringify(body),
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
                async getAggregatedIssuesWithVulnPaths(body) {
                    return await aggregatedissues_1.getAggregatedIssuesWithVulnPaths(Object(this.currentContext), body);
                }
            }
            Aggregatedissues_2.Aggregatedissues = Aggregatedissues;
        })(Aggregatedissues = History_1.Aggregatedissues || (History_1.Aggregatedissues = {}));
        let Issue;
        (function (Issue_2) {
            class Issue {
                constructor(parentContext, Issueparam, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    this.issueId = Issueparam.issueId || '';
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                    this.paths = new Paths.Paths(this.currentContext);
                }
            }
            Issue_2.Issue = Issue;
            let Paths;
            (function (Paths_2) {
                class Paths {
                    constructor(parentContext, fullResponse = false) {
                        this.currentContext = {};
                        const properties = Object.getOwnPropertyNames(parentContext);
                        properties.forEach((property) => {
                            Object(this.currentContext)[property] = Object(parentContext)[property];
                        });
                        const thisProperties = Object.getOwnPropertyNames(this);
                        thisProperties.forEach((thisProperty) => {
                            Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                        });
                    }
                    async get(perPage, page) {
                        let url = '';
                        let urlQueryParams = [];
                        url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/history/${Object(this.currentContext)['snapshotId']}/issue/${Object(this.currentContext)['issueId']}/paths`;
                        if (perPage) {
                            urlQueryParams.push('perPage=' + perPage);
                        }
                        if (page) {
                            urlQueryParams.push('page=' + page);
                        }
                        if (urlQueryParams.length > 0) {
                            url += `?${urlQueryParams.join('&')}`;
                        }
                        try {
                            const result = await requestManager.request({
                                verb: 'get',
                                url: url,
                            });
                            if (!Object(this.currentContext)['fullResponse'] && result.data) {
                                return result.data;
                            }
                            else {
                                return result;
                            }
                        }
                        catch (err) {
                            throw new clientError_1.ClientError(err);
                        }
                    }
                    async getAll(noLimitMode = false) {
                        let url = '';
                        let urlQueryParams = [];
                        url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/history/${Object(this.currentContext)['snapshotId']}/issue/${Object(this.currentContext)['issueId']}/paths`;
                        let currentPage = 1;
                        const PAGELIMIT = 100;
                        urlQueryParams.push('perPage=' + PAGELIMIT);
                        if (urlQueryParams.length > 0) {
                            url += `?${urlQueryParams.join('&')}`;
                        }
                        const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
                        Object(this.currentContext)['fullResponse'] = true;
                        try {
                            const firstPageResult = await requestManager.request({
                                verb: 'get',
                                url: url,
                            });
                            Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                            let totalPages = 1;
                            if (firstPageResult.headers.link) {
                                totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                            }
                            const bulkRequestArray = [];
                            for (let i = 1; i < totalPages; i++) {
                                currentPage++;
                                bulkRequestArray.push({
                                    verb: 'get',
                                    url: url + `&page=${currentPage}`,
                                });
                                if (!noLimitMode && currentPage > PAGELIMIT) {
                                    break;
                                }
                            }
                            let bulkResultsSet = [];
                            if (bulkRequestArray.length > 0) {
                                bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                            }
                            const resultsSet = [
                                firstPageResult.data,
                                ...bulkResultsSet.map((x) => Object(x)['data']),
                            ];
                            return resultsSet;
                        }
                        catch (err) {
                            throw new clientError_1.ClientError(err);
                        }
                    }
                }
                Paths_2.Paths = Paths;
            })(Paths = Issue_2.Paths || (Issue_2.Paths = {}));
        })(Issue = History_1.Issue || (History_1.Issue = {}));
    })(History = Project_1.History || (Project_1.History = {}));
    let Depgraph;
    (function (Depgraph_1) {
        class Depgraph {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async get() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/dep-graph`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'get',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Depgraph_1.Depgraph = Depgraph;
    })(Depgraph = Project_1.Depgraph || (Project_1.Depgraph = {}));
    let Ignores;
    (function (Ignores_1) {
        class Ignores {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async get() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/ignores`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'get',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Ignores_1.Ignores = Ignores;
    })(Ignores = Project_1.Ignores || (Project_1.Ignores = {}));
    [];
    [];
    let Ignore;
    (function (Ignore_1) {
        class Ignore {
            constructor(parentContext, Ignoreparam, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                this.issueId = Ignoreparam.issueId || '';
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async get() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/ignore/${Object(this.currentContext)['issueId']}`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'get',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async post(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/ignore/${Object(this.currentContext)['issueId']}`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async put(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/ignore/${Object(this.currentContext)['issueId']}`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'put',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async delete() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/ignore/${Object(this.currentContext)['issueId']}`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'delete',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Ignore_1.Ignore = Ignore;
    })(Ignore = Project_1.Ignore || (Project_1.Ignore = {}));
    let Jiraissues;
    (function (Jiraissues_1) {
        class Jiraissues {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async get() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/jira-issues`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'get',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Jiraissues_1.Jiraissues = Jiraissues;
    })(Jiraissues = Project_1.Jiraissues || (Project_1.Jiraissues = {}));
    let Settings;
    (function (Settings_3) {
        class Settings {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async get() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/settings`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'get',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async put(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/settings`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'put',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async delete() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/settings`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'delete',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Settings_3.Settings = Settings;
    })(Settings = Project_1.Settings || (Project_1.Settings = {}));
    let Move;
    (function (Move_1) {
        class Move {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async put(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/move`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'put',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Move_1.Move = Move;
    })(Move = Project_1.Move || (Project_1.Move = {}));
    let Tags;
    (function (Tags_1) {
        class Tags {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
                this.remove = new Remove.Remove(this.currentContext);
            }
            async post(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/tags`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Tags_1.Tags = Tags;
        let Remove;
        (function (Remove_1) {
            class Remove {
                constructor(parentContext, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async post(body) {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/tags/remove`;
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'post',
                            url: url,
                            body: JSON.stringify(body),
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
            }
            Remove_1.Remove = Remove;
        })(Remove = Tags_1.Remove || (Tags_1.Remove = {}));
    })(Tags = Project_1.Tags || (Project_1.Tags = {}));
    let Attributes;
    (function (Attributes_1) {
        class Attributes {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}/attributes`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Attributes_1.Attributes = Attributes;
    })(Attributes = Project_1.Attributes || (Project_1.Attributes = {}));
})(Project = exports.Project || (exports.Project = {}));
var Dependencies;
(function (Dependencies_1) {
    class Dependencies {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body, sortBy, order, page, perPage) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/dependencies`;
            if (sortBy) {
                urlQueryParams.push('sortBy=' + sortBy);
            }
            if (order) {
                urlQueryParams.push('order=' + order);
            }
            if (page) {
                urlQueryParams.push('page=' + page);
            }
            if (perPage) {
                urlQueryParams.push('perPage=' + perPage);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async postAll(body, sortBy, order, noLimitMode = false) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/dependencies`;
            if (sortBy) {
                urlQueryParams.push('sortBy=' + sortBy);
            }
            if (order) {
                urlQueryParams.push('order=' + order);
            }
            let currentPage = 1;
            const PAGELIMIT = 100;
            urlQueryParams.push('perPage=' + PAGELIMIT);
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
            Object(this.currentContext)['fullResponse'] = true;
            try {
                const firstPageResult = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                let totalPages = 1;
                if (firstPageResult.headers.link) {
                    totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                }
                const bulkRequestArray = [];
                for (let i = 1; i < totalPages; i++) {
                    currentPage++;
                    bulkRequestArray.push({
                        verb: 'post',
                        url: url + `&page=${currentPage}`,
                        body: JSON.stringify(body),
                    });
                    if (!noLimitMode && currentPage > PAGELIMIT) {
                        break;
                    }
                }
                let bulkResultsSet = [];
                if (bulkRequestArray.length > 0) {
                    bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                }
                const resultsSet = [
                    firstPageResult.data,
                    ...bulkResultsSet.map((x) => Object(x)['data']),
                ];
                return resultsSet;
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Dependencies_1.Dependencies = Dependencies;
})(Dependencies = exports.Dependencies || (exports.Dependencies = {}));
var Licenses;
(function (Licenses_1) {
    class Licenses {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body, sortBy, order) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/licenses`;
            if (sortBy) {
                urlQueryParams.push('sortBy=' + sortBy);
            }
            if (order) {
                urlQueryParams.push('order=' + order);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Licenses_1.Licenses = Licenses;
})(Licenses = exports.Licenses || (exports.Licenses = {}));
var Entitlements;
(function (Entitlements_1) {
    class Entitlements {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/entitlements`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Entitlements_1.Entitlements = Entitlements;
})(Entitlements = exports.Entitlements || (exports.Entitlements = {}));
var Entitlement;
(function (Entitlement_1) {
    class Entitlement {
        constructor(parentContext, Entitlementparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.entitlementKey = Entitlementparam.entitlementKey || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/entitlement/${Object(this.currentContext)['entitlementKey']}`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Entitlement_1.Entitlement = Entitlement;
})(Entitlement = exports.Entitlement || (exports.Entitlement = {}));
var Audit;
(function (Audit_1) {
    class Audit {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body, from, to, page, sortOrder) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/audit`;
            if (from) {
                urlQueryParams.push('from=' + from);
            }
            if (to) {
                urlQueryParams.push('to=' + to);
            }
            if (page) {
                urlQueryParams.push('page=' + page);
            }
            if (sortOrder) {
                urlQueryParams.push('sortOrder=' + sortOrder);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async postAll(body, from, to, sortOrder, noLimitMode = false) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/audit`;
            if (from) {
                urlQueryParams.push('from=' + from);
            }
            if (to) {
                urlQueryParams.push('to=' + to);
            }
            if (sortOrder) {
                urlQueryParams.push('sortOrder=' + sortOrder);
            }
            let currentPage = 1;
            const PAGELIMIT = 100;
            urlQueryParams.push('perPage=' + PAGELIMIT);
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
            Object(this.currentContext)['fullResponse'] = true;
            try {
                const firstPageResult = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                let totalPages = 1;
                if (firstPageResult.headers.link) {
                    totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                }
                const bulkRequestArray = [];
                for (let i = 1; i < totalPages; i++) {
                    currentPage++;
                    bulkRequestArray.push({
                        verb: 'post',
                        url: url + `&page=${currentPage}`,
                        body: JSON.stringify(body),
                    });
                    if (!noLimitMode && currentPage > PAGELIMIT) {
                        break;
                    }
                }
                let bulkResultsSet = [];
                if (bulkRequestArray.length > 0) {
                    bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                }
                const resultsSet = [
                    firstPageResult.data,
                    ...bulkResultsSet.map((x) => Object(x)['data']),
                ];
                return resultsSet;
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Audit_1.Audit = Audit;
})(Audit = exports.Audit || (exports.Audit = {}));
var Webhooks;
(function (Webhooks_1) {
    class Webhooks {
        constructor(parentContext, Webhooksparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.webhookId = Webhooksparam.webhookId || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
            this.ping = new Ping.Ping(this.currentContext);
        }
        async post(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/webhooks`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            if (`${Object(this.currentContext)['orgId']}` != '' &&
                `${Object(this.currentContext)['webhookId']}` != '') {
                url = `/org/${Object(this.currentContext)['orgId']}/webhooks/${Object(this.currentContext)['webhookId']}`;
            }
            else {
                url = `/org/${Object(this.currentContext)['orgId']}/webhooks`;
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async delete() {
            let url = '';
            let urlQueryParams = [];
            url = `/org/${Object(this.currentContext)['orgId']}/webhooks/${Object(this.currentContext)['webhookId']}`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'delete',
                    url: url,
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Webhooks_1.Webhooks = Webhooks;
    let Ping;
    (function (Ping_1) {
        class Ping {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post() {
                let url = '';
                let urlQueryParams = [];
                url = `/org/${Object(this.currentContext)['orgId']}/webhooks/${Object(this.currentContext)['webhookId']}/ping`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify({}),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Ping_1.Ping = Ping;
    })(Ping = Webhooks_1.Ping || (Webhooks_1.Ping = {}));
})(Webhooks = exports.Webhooks || (exports.Webhooks = {}));
//# sourceMappingURL=org.js.map