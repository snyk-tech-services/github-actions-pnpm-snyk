"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Depgraph = exports.Monitor = void 0;
const clientError_1 = require("../errors/clientError");
const snyk_request_manager_1 = require("snyk-request-manager");
const requestManager = new snyk_request_manager_1.requestsManager({
    burstSize: 100,
    period: 100,
    maxRetryCount: 10,
    userAgentPrefix: 'snyk-api-ts-client',
});
class Monitor {
    constructor(fullResponse = false) {
        this.fullResponse = false;
        this.currentContext = {};
        this.fullResponse = fullResponse || false;
        const thisProperties = Object.getOwnPropertyNames(this);
        thisProperties.forEach((thisProperty) => {
            Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
        });
        this.depgraph = new Depgraph.Depgraph(this.currentContext);
    }
}
exports.Monitor = Monitor;
var Depgraph;
(function (Depgraph_1) {
    class Depgraph {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body, org) {
            let url = '';
            let urlQueryParams = [];
            url = `/monitor/dep-graph`;
            if (org) {
                urlQueryParams.push('org=' + org);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Depgraph_1.Depgraph = Depgraph;
})(Depgraph = exports.Depgraph || (exports.Depgraph = {}));
//# sourceMappingURL=monitor.js.map