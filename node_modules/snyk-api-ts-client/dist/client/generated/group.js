"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Audit = exports.Roles = exports.Orgs = exports.Tags = exports.Org = exports.Members = exports.Settings = exports.Group = void 0;
const tslib_1 = require("tslib");
const clientError_1 = require("../errors/clientError");
const snyk_request_manager_1 = require("snyk-request-manager");
const utils = tslib_1.__importStar(require("../utils/utils"));
const requestManager = new snyk_request_manager_1.requestsManager({
    burstSize: 100,
    period: 100,
    maxRetryCount: 10,
    userAgentPrefix: 'snyk-api-ts-client',
});
class Group {
    constructor(Groupparam, fullResponse = false) {
        this.fullResponse = false;
        this.currentContext = {};
        this.fullResponse = fullResponse || false;
        this.groupId = Groupparam.groupId || '';
        const thisProperties = Object.getOwnPropertyNames(this);
        thisProperties.forEach((thisProperty) => {
            Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
        });
        this.settings = new Settings.Settings(this.currentContext);
        this.members = new Members.Members(this.currentContext);
        this.tags = new Tags.Tags(this.currentContext);
        this.orgs = new Orgs.Orgs(this.currentContext);
        this.roles = new Roles.Roles(this.currentContext);
        this.audit = new Audit.Audit(this.currentContext);
    }
    org(Orgparam) {
        return new Org.Org(this.currentContext, { orgId: (Orgparam === null || Orgparam === void 0 ? void 0 : Orgparam.orgId) || '' });
    }
}
exports.Group = Group;
var Settings;
(function (Settings_1) {
    class Settings {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/settings`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async put(body) {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/settings`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'put',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Settings_1.Settings = Settings;
})(Settings = exports.Settings || (exports.Settings = {}));
[];
var Members;
(function (Members_1) {
    class Members {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/members`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Members_1.Members = Members;
})(Members = exports.Members || (exports.Members = {}));
var Org;
(function (Org_1) {
    class Org {
        constructor(parentContext, Orgparam, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            this.orgId = Orgparam.orgId || '';
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
            this.members = new Members.Members(this.currentContext);
        }
    }
    Org_1.Org = Org;
    let Members;
    (function (Members_2) {
        class Members {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/group/${Object(this.currentContext)['groupId']}/org/${Object(this.currentContext)['orgId']}/members`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Members_2.Members = Members;
    })(Members = Org_1.Members || (Org_1.Members = {}));
})(Org = exports.Org || (exports.Org = {}));
var Tags;
(function (Tags_1) {
    class Tags {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
            this.delete = new Delete.Delete(this.currentContext);
        }
        async get(perPage, page) {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/tags`;
            if (perPage) {
                urlQueryParams.push('perPage=' + perPage);
            }
            if (page) {
                urlQueryParams.push('page=' + page);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async getAll(noLimitMode = false) {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/tags`;
            let currentPage = 1;
            const PAGELIMIT = 100;
            urlQueryParams.push('perPage=' + PAGELIMIT);
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
            Object(this.currentContext)['fullResponse'] = true;
            try {
                const firstPageResult = await requestManager.request({
                    verb: 'get',
                    url: url,
                });
                Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                let totalPages = 1;
                if (firstPageResult.headers.link) {
                    totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                }
                const bulkRequestArray = [];
                for (let i = 1; i < totalPages; i++) {
                    currentPage++;
                    bulkRequestArray.push({
                        verb: 'get',
                        url: url + `&page=${currentPage}`,
                    });
                    if (!noLimitMode && currentPage > PAGELIMIT) {
                        break;
                    }
                }
                let bulkResultsSet = [];
                if (bulkRequestArray.length > 0) {
                    bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                }
                const resultsSet = [
                    firstPageResult.data,
                    ...bulkResultsSet.map((x) => Object(x)['data']),
                ];
                return resultsSet;
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Tags_1.Tags = Tags;
    let Delete;
    (function (Delete_1) {
        class Delete {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/group/${Object(this.currentContext)['groupId']}/tags/delete`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Delete_1.Delete = Delete;
    })(Delete = Tags_1.Delete || (Tags_1.Delete = {}));
})(Tags = exports.Tags || (exports.Tags = {}));
var Orgs;
(function (Orgs_1) {
    class Orgs {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get(perPage, page, name) {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/orgs`;
            if (perPage) {
                urlQueryParams.push('perPage=' + perPage);
            }
            if (page) {
                urlQueryParams.push('page=' + page);
            }
            if (name) {
                urlQueryParams.push('name=' + name);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async getAll(name, noLimitMode = false) {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/orgs`;
            if (name) {
                urlQueryParams.push('name=' + name);
            }
            let currentPage = 1;
            const PAGELIMIT = 100;
            urlQueryParams.push('perPage=' + PAGELIMIT);
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
            Object(this.currentContext)['fullResponse'] = true;
            try {
                const firstPageResult = await requestManager.request({
                    verb: 'get',
                    url: url,
                });
                Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                let totalPages = 1;
                if (firstPageResult.headers.link) {
                    totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                }
                const bulkRequestArray = [];
                for (let i = 1; i < totalPages; i++) {
                    currentPage++;
                    bulkRequestArray.push({
                        verb: 'get',
                        url: url + `&page=${currentPage}`,
                    });
                    if (!noLimitMode && currentPage > PAGELIMIT) {
                        break;
                    }
                }
                let bulkResultsSet = [];
                if (bulkRequestArray.length > 0) {
                    bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                }
                const resultsSet = [
                    firstPageResult.data,
                    ...bulkResultsSet.map((x) => Object(x)['data']),
                ];
                return resultsSet;
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Orgs_1.Orgs = Orgs;
})(Orgs = exports.Orgs || (exports.Orgs = {}));
var Roles;
(function (Roles_1) {
    class Roles {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async get() {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/roles`;
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({ verb: 'get', url: url });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Roles_1.Roles = Roles;
})(Roles = exports.Roles || (exports.Roles = {}));
var Audit;
(function (Audit_1) {
    class Audit {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        async post(body, from, to, page, sortOrder) {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/audit`;
            if (from) {
                urlQueryParams.push('from=' + from);
            }
            if (to) {
                urlQueryParams.push('to=' + to);
            }
            if (page) {
                urlQueryParams.push('page=' + page);
            }
            if (sortOrder) {
                urlQueryParams.push('sortOrder=' + sortOrder);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async postAll(body, from, to, sortOrder, noLimitMode = false) {
            let url = '';
            let urlQueryParams = [];
            url = `/group/${Object(this.currentContext)['groupId']}/audit`;
            if (from) {
                urlQueryParams.push('from=' + from);
            }
            if (to) {
                urlQueryParams.push('to=' + to);
            }
            if (sortOrder) {
                urlQueryParams.push('sortOrder=' + sortOrder);
            }
            let currentPage = 1;
            const PAGELIMIT = 100;
            urlQueryParams.push('perPage=' + PAGELIMIT);
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
            Object(this.currentContext)['fullResponse'] = true;
            try {
                const firstPageResult = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                let totalPages = 1;
                if (firstPageResult.headers.link) {
                    totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                }
                const bulkRequestArray = [];
                for (let i = 1; i < totalPages; i++) {
                    currentPage++;
                    bulkRequestArray.push({
                        verb: 'post',
                        url: url + `&page=${currentPage}`,
                        body: JSON.stringify(body),
                    });
                    if (!noLimitMode && currentPage > PAGELIMIT) {
                        break;
                    }
                }
                let bulkResultsSet = [];
                if (bulkRequestArray.length > 0) {
                    bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                }
                const resultsSet = [
                    firstPageResult.data,
                    ...bulkResultsSet.map((x) => Object(x)['data']),
                ];
                return resultsSet;
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Audit_1.Audit = Audit;
})(Audit = exports.Audit || (exports.Audit = {}));
//# sourceMappingURL=group.js.map