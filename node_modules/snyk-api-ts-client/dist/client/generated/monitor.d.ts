export declare class Monitor {
    private currentContext;
    private fullResponse;
    depgraph: Depgraph.Depgraph;
    constructor(fullResponse?: boolean);
}
export interface DepgraphPostBodyType {
    /**
     * A [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata) defining all packages and their relationships.
     */
    depGraph: {
        /**
         * Snyk DepGraph library schema version.
         */
        schemaVersion: string;
        /**
         * Package manager information.
         */
        pkgManager: {
            /**
             * Package manager name.
             */
            name: string;
            /**
             * A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager.
             */
            repositories?: string[];
        };
        /**
         * Array of package dependencies.
         */
        pkgs: string[];
        /**
         * Graph object references each pkg and how they depend on each other through the deps property.
         */
        graph: {
            /**
             * Root node id. Note the root node name is used as your project name.
             */
            rootNodeId: string;
            /**
             * Array of node objects.
             */
            nodes: string[];
        };
    };
    /**
     * Project metadata
     */
    meta?: {
        /**
         * Required for a NuGet or Paket DepGraph only. Specify the target framework in your project file using Target Framework Monikers (TFMs). For example, netstandard1.0, netcoreapp1.0 or net452. Test each framework separately if you have multiple defined.
         */
        targetFramework?: string;
    };
}
export declare type DepgraphPostResponseType = any;
export declare namespace Depgraph {
    class Depgraph {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        post(body: DepgraphPostBodyType, org?: string): Promise<any>;
    }
}
