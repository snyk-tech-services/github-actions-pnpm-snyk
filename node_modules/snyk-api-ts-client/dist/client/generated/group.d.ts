interface groupClass {
    groupId: string;
}
export declare class Group {
    private currentContext;
    private fullResponse;
    private groupId;
    settings: Settings.Settings;
    members: Members.Members;
    tags: Tags.Tags;
    orgs: Orgs.Orgs;
    roles: Roles.Roles;
    audit: Audit.Audit;
    constructor(Groupparam: groupClass, fullResponse?: boolean);
    org(Orgparam?: orgClass): Org.Org;
}
export interface SettingsPutBodyType {
    /**
     * The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days.
     */
    sessionLength?: number;
}
export interface SettingsGetResponseType {
    /**
     * The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days.
     */
    sessionLength?: number;
}
export interface SettingsPutResponseType {
    /**
     * The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days.
     */
    sessionLength?: number;
}
export declare namespace Settings {
    class Settings {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        get(): Promise<SettingsGetResponseType>;
        put(body: SettingsPutBodyType): Promise<SettingsPutResponseType>;
    }
}
export interface MembersGetResponseType {
    [key: string]: any;
}
export declare namespace Members {
    class Members {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        get(): Promise<MembersGetResponseType>;
    }
}
interface orgClass {
    orgId: string;
}
export declare namespace Org {
    class Org {
        private currentContext;
        private orgId;
        members: Members.Members;
        constructor(parentContext: Object, Orgparam: orgClass, fullResponse?: boolean);
    }
    interface MembersPostBodyType {
        /**
         * The id of the user.
         */
        userId?: string;
        /**
         * The role of the user, "admin" or "collaborator".
         */
        role?: string;
    }
    type MembersPostResponseType = any;
    namespace Members {
        class Members {
            private currentContext;
            constructor(parentContext: Object, fullResponse?: boolean);
            post(body: MembersPostBodyType): Promise<any>;
        }
    }
}
export interface TagsGetResponseType {
    tags?: {
        [key: string]: any;
    }[];
}
export declare namespace Tags {
    class Tags {
        private currentContext;
        delete: Delete.Delete;
        constructor(parentContext: Object, fullResponse?: boolean);
        get(perPage?: number, page?: number): Promise<TagsGetResponseType>;
        getAll(noLimitMode?: boolean): Promise<TagsGetResponseType[]>;
    }
    interface DeletePostBodyType {
        /**
         * Valid tag key.
         */
        key?: string;
        /**
         * Valid tag value.
         */
        value?: string;
        /**
         * force delete tag that has entities (default is `false`).
         */
        force?: boolean;
    }
    interface DeletePostResponseType {
        /**
         * Valid tag key.
         */
        key?: string;
        /**
         * Valid tag value.
         */
        value?: string;
        /**
         * force delete tag that has entities (default is `false`).
         */
        force?: boolean;
    }
    namespace Delete {
        class Delete {
            private currentContext;
            constructor(parentContext: Object, fullResponse?: boolean);
            post(body: DeletePostBodyType): Promise<DeletePostResponseType>;
        }
    }
}
export declare type OrgsGetResponseType = any;
export declare namespace Orgs {
    class Orgs {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        get(perPage?: number, page?: number, name?: string): Promise<any>;
        getAll(name?: string, noLimitMode?: boolean): Promise<any>;
    }
}
export declare type RolesGetResponseType = any;
export declare namespace Roles {
    class Roles {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        get(): Promise<any>;
    }
}
export interface AuditPostBodyType {
    filters?: {
        /**
         * User public ID. Will fetch only audit logs originated from this user's actions.
         */
        userId?: string;
        /**
         * User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set.
         */
        email?: string;
        /**
         * Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request.
         */
        event?: 'api.access' | 'group.create' | 'group.edit' | 'group.notification_settings.edit' | 'group.org.add' | 'group.org.remove' | 'group.service_account.create' | 'group.service_account.delete' | 'group.service_account.edit' | 'group.settings.edit' | 'group.request_access_settings.edit' | 'group.user.provision.create' | 'group.user.provision.accept' | 'group.user.provision.delete' | 'group.user.add' | 'group.user.remove' | 'group.user.role.edit' | 'group.tag.create' | 'group.tag.delete' | 'group.policy.create' | 'group.policy.edit' | 'group.policy.delete' | 'group.settings.feature_flag.edit';
        /**
         * Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request.
         */
        excludeEvent?: 'api.access' | 'org.create' | 'org.delete' | 'org.edit' | 'org.ignore_policy.edit' | 'org.integration.create' | 'org.integration.delete' | 'org.integration.edit' | 'org.integration.settings.edit' | 'org.notification_settings.edit' | 'org.cloud_config.settings.edit' | 'org.settings.feature_flag.edit' | 'org.sast_settings.edit' | 'org.request_access_settings.edit' | 'org.webhook.add' | 'org.webhook.delete' | 'org.project.add' | 'org.project.edit' | 'org.project.delete' | 'org.project.remove' | 'org.project.monitor' | 'org.project.stop_monitor' | 'org.project.test' | 'org.project.ignore.create' | 'org.project.ignore.delete' | 'org.project.ignore.edit' | 'org.project.settings.edit' | 'org.project.settings.delete' | 'org.project.tag.add' | 'org.project.tag.remove' | 'org.project.attributes.edit' | 'org.service_account.create' | 'org.service_account.delete' | 'org.service_account.edit' | 'org.user.provision.create' | 'org.user.provision.accept' | 'org.user.provision.delete' | 'org.user.add' | 'org.user.invite' | 'org.user.invite.accept' | 'org.user.leave' | 'org.user.remove' | 'org.user.role.edit' | 'org.billing.info.edit' | 'org.billing.subscription.edit' | 'org.project.fix_pr.manual_open' | 'org.project.fix_pr.auto_open' | 'org.project.pr_check.edit' | 'org.license_rule.create' | 'org.license_rule.edit' | 'org.license_rule.delete' | 'org.policy.edit';
        /**
         * Will return only logs for this specific project.
         */
        projectId?: string;
    };
}
export declare type AuditPostResponseType = any;
export declare namespace Audit {
    class Audit {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        post(body: AuditPostBodyType, from?: string, to?: string, page?: number, sortOrder?: string): Promise<any>;
        postAll(body: AuditPostBodyType, from?: string, to?: string, sortOrder?: string, noLimitMode?: boolean): Promise<any>;
    }
}
export {};
