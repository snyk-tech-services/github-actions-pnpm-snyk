interface userClass {
    userId?: string;
}
export interface UserGetResponseType {
    /**
     * The id of the user.
     */
    id?: string;
    /**
     * The name of the user.
     */
    name?: string;
    /**
     * The username of the user.
     */
    username?: string;
    /**
     * The email of the user.
     */
    email?: string;
}
export declare class User {
    private currentContext;
    private fullResponse;
    private userId?;
    notificationsettings: Notificationsettings.Notificationsettings;
    constructor(Userparam?: userClass, fullResponse?: boolean);
    get(): Promise<UserGetResponseType>;
}
export declare namespace Notificationsettings {
    export class Notificationsettings {
        private currentContext;
        constructor(parentContext: Object, fullResponse?: boolean);
        org(Orgparam?: orgClass): Org.Org;
    }
    interface orgClass {
        orgId: string;
    }
    export interface OrgPutBodyType {
        'new-issues-remediations'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)
             */
            issueSeverity: 'all' | 'high';
            /**
             * Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)
             */
            issueType: 'all' | 'vuln' | 'license' | 'none';
        };
        'project-imported'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
        };
        'test-limit'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
        };
        'weekly-report'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
        };
    }
    export interface OrgGetResponseType {
        'new-issues-remediations'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)
             */
            issueSeverity: 'all' | 'high';
            /**
             * Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)
             */
            issueType: 'all' | 'vuln' | 'license' | 'none';
            /**
             * Whether the setting was found on the requested context directly or inherited from a parent
             */
            inherited?: boolean;
        };
        'project-imported'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * Whether the setting was found on the requested context directly or inherited from a parent
             */
            inherited?: boolean;
        };
        'test-limit'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * Whether the setting was found on the requested context directly or inherited from a parent
             */
            inherited?: boolean;
        };
        'weekly-report'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * Whether the setting was found on the requested context directly or inherited from a parent
             */
            inherited?: boolean;
        };
    }
    export interface OrgPutResponseType {
        'new-issues-remediations'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)
             */
            issueSeverity: 'all' | 'high';
            /**
             * Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)
             */
            issueType: 'all' | 'vuln' | 'license' | 'none';
            /**
             * Whether the setting was found on the requested context directly or inherited from a parent
             */
            inherited?: boolean;
        };
        'project-imported'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * Whether the setting was found on the requested context directly or inherited from a parent
             */
            inherited?: boolean;
        };
        'test-limit'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * Whether the setting was found on the requested context directly or inherited from a parent
             */
            inherited?: boolean;
        };
        'weekly-report'?: {
            /**
             * Whether notifications should be sent
             */
            enabled: boolean;
            /**
             * Whether the setting was found on the requested context directly or inherited from a parent
             */
            inherited?: boolean;
        };
    }
    export namespace Org {
        export class Org {
            private currentContext;
            private orgId;
            constructor(parentContext: Object, Orgparam: orgClass, fullResponse?: boolean);
            project(Projectparam?: projectClass): Project.Project;
            get(): Promise<OrgGetResponseType>;
            put(body: OrgPutBodyType): Promise<OrgPutResponseType>;
        }
        interface projectClass {
            projectId: string;
        }
        export interface ProjectPutBodyType {
            'new-issues-remediations'?: {
                /**
                 * Whether notifications should be sent
                 */
                enabled: boolean;
                /**
                 * The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)
                 */
                issueSeverity: 'all' | 'high';
                /**
                 * Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)
                 */
                issueType: 'all' | 'vuln' | 'license' | 'none';
            };
        }
        export interface ProjectGetResponseType {
            'new-issues-remediations'?: {
                /**
                 * Whether notifications should be sent
                 */
                enabled: boolean;
                /**
                 * The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType)
                 */
                issueSeverity: 'all' | 'high';
                /**
                 * Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType)
                 */
                issueType: 'all' | 'vuln' | 'license' | 'none';
                /**
                 * Whether the setting was found on the requested context directly or inherited from a parent
                 */
                inherited?: boolean;
            };
            'project-imported'?: {
                /**
                 * Whether notifications should be sent
                 */
                enabled: boolean;
                /**
                 * Whether the setting was found on the requested context directly or inherited from a parent
                 */
                inherited?: boolean;
            };
            'test-limit'?: {
                /**
                 * Whether notifications should be sent
                 */
                enabled: boolean;
                /**
                 * Whether the setting was found on the requested context directly or inherited from a parent
                 */
                inherited?: boolean;
            };
            'weekly-report'?: {
                /**
                 * Whether notifications should be sent
                 */
                enabled: boolean;
                /**
                 * Whether the setting was found on the requested context directly or inherited from a parent
                 */
                inherited?: boolean;
            };
        }
        export type ProjectPutResponseType = any;
        export namespace Project {
            class Project {
                private currentContext;
                private projectId;
                constructor(parentContext: Object, Projectparam: projectClass, fullResponse?: boolean);
                get(): Promise<ProjectGetResponseType>;
                put(body: ProjectPutBodyType): Promise<any>;
            }
        }
        export {};
    }
    export {};
}
export {};
