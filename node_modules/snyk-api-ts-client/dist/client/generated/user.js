"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notificationsettings = exports.User = void 0;
const clientError_1 = require("../errors/clientError");
const snyk_request_manager_1 = require("snyk-request-manager");
const requestManager = new snyk_request_manager_1.requestsManager({
    burstSize: 100,
    period: 100,
    maxRetryCount: 10,
    userAgentPrefix: 'snyk-api-ts-client',
});
class User {
    constructor(Userparam, fullResponse = false) {
        this.fullResponse = false;
        this.currentContext = {};
        this.fullResponse = fullResponse || false;
        this.userId = (Userparam === null || Userparam === void 0 ? void 0 : Userparam.userId) || 'me';
        const thisProperties = Object.getOwnPropertyNames(this);
        thisProperties.forEach((thisProperty) => {
            Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
        });
        this.notificationsettings = new Notificationsettings.Notificationsettings(this.currentContext);
    }
    async get() {
        let url = '';
        let urlQueryParams = [];
        url = `/user/${Object(this.currentContext)['userId']}`;
        if (urlQueryParams.length > 0) {
            url += `?${urlQueryParams.join('&')}`;
        }
        try {
            const result = await requestManager.request({ verb: 'get', url: url });
            if (!Object(this.currentContext)['fullResponse'] && result.data) {
                return result.data;
            }
            else {
                return result;
            }
        }
        catch (err) {
            throw new clientError_1.ClientError(err);
        }
    }
}
exports.User = User;
var Notificationsettings;
(function (Notificationsettings_1) {
    class Notificationsettings {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
        }
        org(Orgparam) {
            return new Org.Org(this.currentContext, { orgId: (Orgparam === null || Orgparam === void 0 ? void 0 : Orgparam.orgId) || '' });
        }
    }
    Notificationsettings_1.Notificationsettings = Notificationsettings;
    let Org;
    (function (Org_1) {
        class Org {
            constructor(parentContext, Orgparam, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                this.orgId = Orgparam.orgId || '';
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            project(Projectparam) {
                return new Project.Project(this.currentContext, {
                    projectId: (Projectparam === null || Projectparam === void 0 ? void 0 : Projectparam.projectId) || '',
                });
            }
            async get() {
                let url = '';
                let urlQueryParams = [];
                url = `/user/me/notification-settings/org/${Object(this.currentContext)['orgId']}`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'get',
                        url: url,
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async put(body) {
                let url = '';
                let urlQueryParams = [];
                url = `/user/me/notification-settings/org/${Object(this.currentContext)['orgId']}`;
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'put',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Org_1.Org = Org;
        let Project;
        (function (Project_1) {
            class Project {
                constructor(parentContext, Projectparam, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    this.projectId = Projectparam.projectId || '';
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async get() {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/user/me/notification-settings/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}`;
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'get',
                            url: url,
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
                async put(body) {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/user/me/notification-settings/org/${Object(this.currentContext)['orgId']}/project/${Object(this.currentContext)['projectId']}`;
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'put',
                            url: url,
                            body: JSON.stringify(body),
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
            }
            Project_1.Project = Project;
        })(Project = Org_1.Project || (Org_1.Project = {}));
    })(Org = Notificationsettings_1.Org || (Notificationsettings_1.Org = {}));
})(Notificationsettings = exports.Notificationsettings || (exports.Notificationsettings = {}));
//# sourceMappingURL=user.js.map