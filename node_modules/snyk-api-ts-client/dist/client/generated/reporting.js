"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Counts = exports.Issues = exports.Reporting = void 0;
const tslib_1 = require("tslib");
const clientError_1 = require("../errors/clientError");
const snyk_request_manager_1 = require("snyk-request-manager");
const utils = tslib_1.__importStar(require("../utils/utils"));
const requestManager = new snyk_request_manager_1.requestsManager({
    burstSize: 100,
    period: 100,
    maxRetryCount: 10,
    userAgentPrefix: 'snyk-api-ts-client',
});
class Reporting {
    constructor(fullResponse = false) {
        this.fullResponse = false;
        this.currentContext = {};
        this.fullResponse = fullResponse || false;
        const thisProperties = Object.getOwnPropertyNames(this);
        thisProperties.forEach((thisProperty) => {
            Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
        });
        this.issues = new Issues.Issues(this.currentContext);
        this.counts = new Counts.Counts(this.currentContext);
    }
}
exports.Reporting = Reporting;
var Issues;
(function (Issues_1) {
    class Issues {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
            this.latest = new Latest.Latest(this.currentContext);
        }
        async post(body, from, to, page, perPage, sortBy, order, groupBy) {
            let url = '';
            let urlQueryParams = [];
            url = `/reporting/issues/`;
            if (from) {
                urlQueryParams.push('from=' + from);
            }
            if (to) {
                urlQueryParams.push('to=' + to);
            }
            if (page) {
                urlQueryParams.push('page=' + page);
            }
            if (perPage) {
                urlQueryParams.push('perPage=' + perPage);
            }
            if (sortBy) {
                urlQueryParams.push('sortBy=' + sortBy);
            }
            if (order) {
                urlQueryParams.push('order=' + order);
            }
            if (groupBy) {
                urlQueryParams.push('groupBy=' + groupBy);
            }
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            try {
                const result = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                if (!Object(this.currentContext)['fullResponse'] && result.data) {
                    return result.data;
                }
                else {
                    return result;
                }
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
        async postAll(body, from, to, sortBy, order, groupBy, noLimitMode = false) {
            let url = '';
            let urlQueryParams = [];
            url = `/reporting/issues/`;
            if (from) {
                urlQueryParams.push('from=' + from);
            }
            if (to) {
                urlQueryParams.push('to=' + to);
            }
            if (sortBy) {
                urlQueryParams.push('sortBy=' + sortBy);
            }
            if (order) {
                urlQueryParams.push('order=' + order);
            }
            if (groupBy) {
                urlQueryParams.push('groupBy=' + groupBy);
            }
            let currentPage = 1;
            const PAGELIMIT = 100;
            urlQueryParams.push('perPage=' + PAGELIMIT);
            if (urlQueryParams.length > 0) {
                url += `?${urlQueryParams.join('&')}`;
            }
            const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
            Object(this.currentContext)['fullResponse'] = true;
            try {
                const firstPageResult = await requestManager.request({
                    verb: 'post',
                    url: url,
                    body: JSON.stringify(body),
                });
                Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                let totalPages = 1;
                if (firstPageResult.headers.link) {
                    totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                }
                const bulkRequestArray = [];
                for (let i = 1; i < totalPages; i++) {
                    currentPage++;
                    bulkRequestArray.push({
                        verb: 'post',
                        url: url + `&page=${currentPage}`,
                        body: JSON.stringify(body),
                    });
                    if (!noLimitMode && currentPage > PAGELIMIT) {
                        break;
                    }
                }
                let bulkResultsSet = [];
                if (bulkRequestArray.length > 0) {
                    bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                }
                const resultsSet = [
                    firstPageResult.data,
                    ...bulkResultsSet.map((x) => Object(x)['data']),
                ];
                return resultsSet;
            }
            catch (err) {
                throw new clientError_1.ClientError(err);
            }
        }
    }
    Issues_1.Issues = Issues;
    let Latest;
    (function (Latest_1) {
        class Latest {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post(body, page, perPage, sortBy, order, groupBy) {
                let url = '';
                let urlQueryParams = [];
                url = `/reporting/issues/latest`;
                if (page) {
                    urlQueryParams.push('page=' + page);
                }
                if (perPage) {
                    urlQueryParams.push('perPage=' + perPage);
                }
                if (sortBy) {
                    urlQueryParams.push('sortBy=' + sortBy);
                }
                if (order) {
                    urlQueryParams.push('order=' + order);
                }
                if (groupBy) {
                    urlQueryParams.push('groupBy=' + groupBy);
                }
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
            async postAll(body, sortBy, order, groupBy, noLimitMode = false) {
                let url = '';
                let urlQueryParams = [];
                url = `/reporting/issues/latest`;
                if (sortBy) {
                    urlQueryParams.push('sortBy=' + sortBy);
                }
                if (order) {
                    urlQueryParams.push('order=' + order);
                }
                if (groupBy) {
                    urlQueryParams.push('groupBy=' + groupBy);
                }
                let currentPage = 1;
                const PAGELIMIT = 100;
                urlQueryParams.push('perPage=' + PAGELIMIT);
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                const fullResponseUserSetting = Object(this.currentContext)['fullResponse'];
                Object(this.currentContext)['fullResponse'] = true;
                try {
                    const firstPageResult = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    Object(this.currentContext)['fullResponse'] = fullResponseUserSetting;
                    let totalPages = 1;
                    if (firstPageResult.headers.link) {
                        totalPages = utils.getTotalPaginationCount(firstPageResult.headers.link);
                    }
                    const bulkRequestArray = [];
                    for (let i = 1; i < totalPages; i++) {
                        currentPage++;
                        bulkRequestArray.push({
                            verb: 'post',
                            url: url + `&page=${currentPage}`,
                            body: JSON.stringify(body),
                        });
                        if (!noLimitMode && currentPage > PAGELIMIT) {
                            break;
                        }
                    }
                    let bulkResultsSet = [];
                    if (bulkRequestArray.length > 0) {
                        bulkResultsSet = await requestManager.requestBulk(bulkRequestArray);
                    }
                    const resultsSet = [
                        firstPageResult.data,
                        ...bulkResultsSet.map((x) => Object(x)['data']),
                    ];
                    return resultsSet;
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Latest_1.Latest = Latest;
    })(Latest = Issues_1.Latest || (Issues_1.Latest = {}));
})(Issues = exports.Issues || (exports.Issues = {}));
var Counts;
(function (Counts_1) {
    class Counts {
        constructor(parentContext, fullResponse = false) {
            this.currentContext = {};
            const properties = Object.getOwnPropertyNames(parentContext);
            properties.forEach((property) => {
                Object(this.currentContext)[property] = Object(parentContext)[property];
            });
            const thisProperties = Object.getOwnPropertyNames(this);
            thisProperties.forEach((thisProperty) => {
                Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
            });
            this.issues = new Issues.Issues(this.currentContext);
            this.projects = new Projects.Projects(this.currentContext);
            this.tests = new Tests.Tests(this.currentContext);
        }
    }
    Counts_1.Counts = Counts;
    let Issues;
    (function (Issues_2) {
        class Issues {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
                this.latest = new Latest.Latest(this.currentContext);
            }
            async post(body, from, to, groupBy) {
                let url = '';
                let urlQueryParams = [];
                url = `/reporting/counts/issues`;
                if (from) {
                    urlQueryParams.push('from=' + from);
                }
                if (to) {
                    urlQueryParams.push('to=' + to);
                }
                if (groupBy) {
                    urlQueryParams.push('groupBy=' + groupBy);
                }
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Issues_2.Issues = Issues;
        let Latest;
        (function (Latest_2) {
            class Latest {
                constructor(parentContext, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async post(body, groupBy) {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/reporting/counts/issues/latest`;
                    if (groupBy) {
                        urlQueryParams.push('groupBy=' + groupBy);
                    }
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'post',
                            url: url,
                            body: JSON.stringify(body),
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
            }
            Latest_2.Latest = Latest;
        })(Latest = Issues_2.Latest || (Issues_2.Latest = {}));
    })(Issues = Counts_1.Issues || (Counts_1.Issues = {}));
    let Projects;
    (function (Projects_1) {
        class Projects {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
                this.latest = new Latest.Latest(this.currentContext);
            }
            async post(body, from, to) {
                let url = '';
                let urlQueryParams = [];
                url = `/reporting/counts/projects`;
                if (from) {
                    urlQueryParams.push('from=' + from);
                }
                if (to) {
                    urlQueryParams.push('to=' + to);
                }
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Projects_1.Projects = Projects;
        let Latest;
        (function (Latest_3) {
            class Latest {
                constructor(parentContext, fullResponse = false) {
                    this.currentContext = {};
                    const properties = Object.getOwnPropertyNames(parentContext);
                    properties.forEach((property) => {
                        Object(this.currentContext)[property] = Object(parentContext)[property];
                    });
                    const thisProperties = Object.getOwnPropertyNames(this);
                    thisProperties.forEach((thisProperty) => {
                        Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                    });
                }
                async post(body) {
                    let url = '';
                    let urlQueryParams = [];
                    url = `/reporting/counts/projects/latest`;
                    if (urlQueryParams.length > 0) {
                        url += `?${urlQueryParams.join('&')}`;
                    }
                    try {
                        const result = await requestManager.request({
                            verb: 'post',
                            url: url,
                            body: JSON.stringify(body),
                        });
                        if (!Object(this.currentContext)['fullResponse'] && result.data) {
                            return result.data;
                        }
                        else {
                            return result;
                        }
                    }
                    catch (err) {
                        throw new clientError_1.ClientError(err);
                    }
                }
            }
            Latest_3.Latest = Latest;
        })(Latest = Projects_1.Latest || (Projects_1.Latest = {}));
    })(Projects = Counts_1.Projects || (Counts_1.Projects = {}));
    let Tests;
    (function (Tests_1) {
        class Tests {
            constructor(parentContext, fullResponse = false) {
                this.currentContext = {};
                const properties = Object.getOwnPropertyNames(parentContext);
                properties.forEach((property) => {
                    Object(this.currentContext)[property] = Object(parentContext)[property];
                });
                const thisProperties = Object.getOwnPropertyNames(this);
                thisProperties.forEach((thisProperty) => {
                    Object(this.currentContext)[thisProperty] = Object(this)[thisProperty];
                });
            }
            async post(body, from, to, groupBy) {
                let url = '';
                let urlQueryParams = [];
                url = `/reporting/counts/tests`;
                if (from) {
                    urlQueryParams.push('from=' + from);
                }
                if (to) {
                    urlQueryParams.push('to=' + to);
                }
                if (groupBy) {
                    urlQueryParams.push('groupBy=' + groupBy);
                }
                if (urlQueryParams.length > 0) {
                    url += `?${urlQueryParams.join('&')}`;
                }
                try {
                    const result = await requestManager.request({
                        verb: 'post',
                        url: url,
                        body: JSON.stringify(body),
                    });
                    if (!Object(this.currentContext)['fullResponse'] && result.data) {
                        return result.data;
                    }
                    else {
                        return result;
                    }
                }
                catch (err) {
                    throw new clientError_1.ClientError(err);
                }
            }
        }
        Tests_1.Tests = Tests;
    })(Tests = Counts_1.Tests || (Counts_1.Tests = {}));
})(Counts = exports.Counts || (exports.Counts = {}));
//# sourceMappingURL=reporting.js.map