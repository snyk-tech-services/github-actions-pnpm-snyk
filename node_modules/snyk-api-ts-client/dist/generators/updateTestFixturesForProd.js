"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateFixtures = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const _ = tslib_1.__importStar(require("lodash"));
exports.updateFixtures = async (testCasesFolderPath) => {
    const testFilesList = fs.readdirSync(testCasesFolderPath);
    testFilesList.forEach((testFile) => {
        const classFileContent = fs
            .readFileSync(testCasesFolderPath + '/' + testFile)
            .toString();
        const regex = /fixtures\.[a-zA-Z0-9\.]+/g;
        const fixturesList = _.uniq(classFileContent.match(regex));
        const className = testFile.replace('.test.ts', '');
        const jsonFixturesList = convertListIntoJson(fixturesList);
        if (fs.existsSync(`./test/fixtures/${className}.json`)) {
            const existingFixtures = JSON.parse(fs.readFileSync(`./test/fixtures/${className}.json`).toString());
            const mergedFixtures = _.merge(jsonFixturesList, existingFixtures);
            fs.writeFileSync(`./test/fixtures/${className}.json`, JSON.stringify(mergedFixtures));
        }
        else {
            fs.writeFileSync(`./test/fixtures/${className}.json`, JSON.stringify(jsonFixturesList));
        }
    });
};
const convertListIntoJson = (fixturesList) => {
    let jsonFixturesList = {};
    fixturesList.forEach((fixture) => {
        jsonFixturesList = _.merge(getFixtureIntoObject(fixture), jsonFixturesList);
    });
    return jsonFixturesList;
};
const getFixtureIntoObject = (fixture) => {
    let currentObject = {}; //jsonObjectToAddTo
    const splitFixture = fixture.split('.');
    if (splitFixture.length > 1) {
        if (!currentObject.hasOwnProperty(splitFixture[0])) {
            Object(currentObject)[splitFixture[0]] = {};
        }
        Object(currentObject)[splitFixture[0]] = getFixtureIntoObject(splitFixture.slice(1).join('.'));
    }
    else {
        Object(currentObject)[splitFixture[0]] = '';
    }
    return currentObject;
};
// const convertFixtureLineIntoJson = (fixture: string): string => {
//     const splitFixture = fixture.split('.')
//     if(splitFixture.length > 1) {
//         return `${splitFixture[0]}: { ${convertFixtureLineIntoJson(splitFixture.slice(1).join('.'))} }`
//     } else {
//         return `${splitFixture[0]}: ''`
//     }
// }
exports.updateFixtures('./test/lib');
//# sourceMappingURL=updateTestFixturesForProd.js.map