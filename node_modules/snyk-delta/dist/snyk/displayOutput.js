"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.displayNewLicenseIssues = exports.displayNewVulns = exports.displayOutput = void 0;
const _ = require("lodash");
const utils_1 = require("../utils/utils");
const chalk = require("chalk");
const terminalLink = require("terminal-link");
const displayOutput = (newVulns, newLicenseIssues, issueTypeFilter, mode) => {
    if ((newVulns.length > 0 && issueTypeFilter != "license") || (newLicenseIssues.length > 0 && issueTypeFilter != "vuln")) {
        utils_1.displaySplash();
        if (newVulns.length > 0 && issueTypeFilter != "license") {
            displayNewVulns(newVulns, mode);
        }
        if (newLicenseIssues.length > 0 && issueTypeFilter != "vuln") {
            displayNewLicenseIssues(newLicenseIssues, mode);
        }
        process.exitCode = 1;
    }
    else {
        console.log("No new issues found !");
        process.exitCode = 0;
    }
};
exports.displayOutput = displayOutput;
const displayNewVulns = (newVulns, mode) => {
    if (newVulns.length == 1) {
        console.log(chalk.bgHex('#fc9803')('\nNew issue introduced !'));
        console.log('Security Vulnerability:\n');
    }
    else if (newVulns.length > 1) {
        console.log(chalk.bgMagentaBright('\nNew issues introduced !'));
        console.log('Security Vulnerabilities:');
    }
    newVulns.forEach((vuln, index) => {
        const typedVuln = vuln;
        switch (vuln.severity) {
            case 'high':
                console.log(chalk.bold.red(`  ${index + 1}/${newVulns.length}: ${vuln.title} [${_.capitalize(vuln.severity)} Severity]`));
                break;
            case 'medium':
                console.log(chalk.bold.yellow(`  ${index + 1}/${newVulns.length}: ${vuln.title} [${_.capitalize(vuln.severity)} Severity]`));
                break;
            case 'low':
                console.log(chalk.bold.blue(`  ${index + 1}/${newVulns.length}: ${vuln.title} [${_.capitalize(vuln.severity)} Severity]`));
                break;
            default:
                console.log(chalk.bold(`  ${index + 1}/${newVulns.length}: ${vuln.title} [${_.capitalize(vuln.severity)} Severity]`));
        }
        let paths = vuln.from;
        if (mode == 'inline') {
            paths.shift();
        }
        console.log(chalk('    Via:', paths.join(' => ')));
        if (vuln.fixedIn) {
            console.log(chalk.yellow('    Fixed in:', vuln.packageName, vuln.fixedIn.join(', ')));
            if (vuln.isUpgradable) {
                const upgradePaths = vuln.upgradePath || [];
                console.log(chalk.green('    Fixable by upgrade: ', upgradePaths.filter((vulnPath) => vulnPath != false).join('=>')));
            }
            if (vuln.isPatchable) {
                const patchLink = terminalLink('patch', 'https://support.snyk.io/hc/en-us/articles/360003891078-Snyk-patches-to-fix');
                //console.log("    Fixable by ",patchLink,": ", vuln.patches.map(patch => patch.id))
                console.log(chalk.green('    Fixable by', patchLink, ': ', typedVuln.patches.map((patch) => patch.id).join(', ')));
            }
        }
        console.log('\n');
    });
};
exports.displayNewVulns = displayNewVulns;
const displayNewLicenseIssues = (newLicenseIssues, mode) => {
    if (newLicenseIssues.length == 1) {
        console.log(chalk.bgHex('#fc9803')('\nNew issue introduced !'));
        console.log('License Issue:\n');
    }
    else if (newLicenseIssues.length > 1) {
        console.log(chalk.bgMagentaBright('\nNew issues introduced !'));
        console.log('License Issues:');
    }
    newLicenseIssues.forEach((issue, index) => {
        switch (issue.severity) {
            case 'high':
                console.log(chalk.bold.red(`  ${index + 1}/${newLicenseIssues.length}: ${issue.title} [${_.capitalize(issue.severity)} Severity]`));
                break;
            case 'medium':
                console.log(chalk.bold.yellow(`  ${index + 1}/${newLicenseIssues.length}: ${issue.title} [${_.capitalize(issue.severity)} Severity]`));
                break;
            case 'low':
                console.log(chalk.bold.blue(`  ${index + 1}/${newLicenseIssues.length}: ${issue.title} [${_.capitalize(issue.severity)} Severity]`));
                break;
            default:
                console.log(chalk.bold(`  ${index + 1}/${newLicenseIssues.length}: ${issue.title} [${_.capitalize(issue.severity)} Severity]`));
        }
        let paths = issue.from;
        if (mode == 'inline') {
            paths.shift();
        }
        console.log(chalk('    Via:', paths.join(' => '), '\n'));
    });
};
exports.displayNewLicenseIssues = displayNewLicenseIssues;
//# sourceMappingURL=displayOutput.js.map