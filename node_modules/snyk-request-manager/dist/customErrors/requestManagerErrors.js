"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestsManagerErrorOverload = exports.RequestsManagerGenericError = exports.RequestsManagerNotFoundError = exports.RequestsManagerApiAuthenticationError = exports.RequestsManagerApiError = void 0;
const debugModule = require("debug");
const apiError_1 = require("./apiError");
const debug = debugModule('snyk');
const requestsManagerErrorOverload = (err, channel, requestId) => {
    debug('ERROR:', err);
    switch (err === null || err === void 0 ? void 0 : err.name) {
        case 'ApiError':
            return new RequestsManagerApiError(err.message, channel, requestId);
        case 'ApiAuthenticationError':
            return new RequestsManagerApiAuthenticationError(err.message, channel, requestId);
        case 'NotFoundError':
            return new RequestsManagerNotFoundError(err.message, channel, requestId);
        case 'Unknown':
            return new RequestsManagerGenericError(err.message, channel, requestId);
        default:
    }
    return new RequestsManagerGenericError("Unclassified", channel, requestId);
};
exports.requestsManagerErrorOverload = requestsManagerErrorOverload;
class RequestsManagerApiError extends apiError_1.ApiError {
    constructor(message, channel, requestId) {
        super(message);
        this.name = "ApiError";
        this.channel = channel;
        this.requestId = requestId;
        this.message = (message || "");
    }
}
exports.RequestsManagerApiError = RequestsManagerApiError;
class RequestsManagerApiAuthenticationError extends apiError_1.ApiAuthenticationError {
    constructor(message, channel, requestId) {
        super(message);
        this.name = "ApiAuthenticationError";
        this.channel = channel;
        this.requestId = requestId;
        this.message = (message || "");
    }
}
exports.RequestsManagerApiAuthenticationError = RequestsManagerApiAuthenticationError;
class RequestsManagerNotFoundError extends apiError_1.NotFoundError {
    constructor(message, channel, requestId) {
        super(message);
        this.name = "NotFoundError";
        this.channel = channel;
        this.requestId = requestId;
        this.message = (message || "");
    }
}
exports.RequestsManagerNotFoundError = RequestsManagerNotFoundError;
class RequestsManagerGenericError extends apiError_1.GenericError {
    constructor(message, channel, requestId) {
        super(message);
        this.name = "Unknown";
        this.channel = channel;
        this.requestId = requestId;
        this.message = (message || "");
    }
}
exports.RequestsManagerGenericError = RequestsManagerGenericError;
//# sourceMappingURL=requestManagerErrors.js.map