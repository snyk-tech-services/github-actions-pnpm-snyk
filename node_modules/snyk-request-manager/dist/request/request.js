"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.makeSnykRequest = void 0;
const Configstore = require('@snyk/configstore');
const axios_1 = require("axios");
const Error = require("../customErrors/apiError");
const getTopParentModuleName = (parent) => {
    if (parent == null) {
        return '';
    }
    if (parent === null || parent === void 0 ? void 0 : parent.parent) {
        return getTopParentModuleName(parent.parent);
    }
    else {
        return (parent === null || parent === void 0 ? void 0 : parent.paths[0].split('/')[parent.paths[0].split('/').length - 2]) + '/';
    }
};
const makeSnykRequest = async (request, snykToken = '', userAgentPrefix = '') => {
    var _a;
    const userConfig = getConfig();
    const token = snykToken == '' ? userConfig.token : snykToken;
    let topParentModuleName = getTopParentModuleName(module.parent);
    const userAgentPrefixChecked = userAgentPrefix != '' && !userAgentPrefix.endsWith('/') ? userAgentPrefix + '/' : userAgentPrefix;
    const requestHeaders = {
        'Content-Type': 'application/json',
        'Authorization': 'token ' + token,
        'User-Agent': `${topParentModuleName}${userAgentPrefixChecked}tech-services/snyk-request-manager/1.0`
    };
    const apiClient = axios_1.default.create({
        baseURL: userConfig.endpoint,
        responseType: 'json',
        headers: { ...requestHeaders, ...request.headers }
    });
    try {
        let res;
        switch (request.verb.toUpperCase()) {
            case "GET":
                res = await apiClient.get(request.url);
                break;
            case "POST":
                res = await apiClient.post(request.url, request.body);
                break;
            case "PUT":
                res = await apiClient.put(request.url, request.body);
                break;
            case "DELETE":
                res = await apiClient.delete(request.url);
                break;
            default:
                throw new Error.GenericError('Unexpected http command');
        }
        return res;
    }
    catch (err) {
        switch ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) {
            case 401:
                throw new Error.ApiAuthenticationError(err);
            case 404:
                throw new Error.NotFoundError(err);
            case 500:
                throw new Error.ApiError(err);
            default:
                throw new Error.GenericError(err);
        }
    }
};
exports.makeSnykRequest = makeSnykRequest;
const getConfig = () => {
    const snykApiEndpoint = process.env.SNYK_API || new Configstore('snyk').get('endpoint') || 'https://snyk.io/api/v1';
    const snykToken = process.env.SNYK_TOKEN || new Configstore('snyk').get('api');
    return { endpoint: snykApiEndpoint, token: snykToken };
};
exports.getConfig = getConfig;
//# sourceMappingURL=request.js.map